section.data
zero: db '0'
lz : equ $-zero
space : db ' '
ls : equ $-space
m1: db 'Enter a number:'
l1: equ $-m1

section.bss
    read : resd 1
    temp : resd 1
    print : resd 1
    counter : resd 1
    n : resd 1

section.text
global_start:
_start:

mov eax, 4
mov ebx, 1
mov ecx, m1
mov edx, l1

call read_num
mov eax, dword[read]
mov dword[n], eax

mov eax, dword[n]
mov dword[print], eax
call print_num

exit:
    mov eax, 1
    mov ebx, 0
    int 80h

read_num:
pusha
dword[read], 0

reading:
    mov eax,3
    mov ebx, 0
    mov ecx, temp
    mov edx, 1
    int 80h

    cmp dword[temp], 10
    je end_read

    sub dword[temp], 30h
    mov eax, dword[temp]
    mov edx, 0
    mov ebx, 10
    mul ebx

    add eax, dword[temp]
    mov dword[read], eax
    jmp reading

end_read:
popa
ret

print_num:
pusha
mov dword[counter], 0
cmp dword[print], 0
jne extracting

mov eax, 4
mov ebx, 1
mov ecx, zero
mov edx, lz
int 80h

extracting:
    cmp dword[print], 0
    je printing

    mov eax, dword[print]
    mov edx, 0
    mov ebx, 10
    div ebx
    push edx
    mov dword[print], eax
    inc dword[counter]
    jmp extracting

printing:
    cmp dword[counter], 0
    je end_print

    pop edx
    mov dword[temp], edx
    add dword[temp], 30h
    mov eax, 4
    mov ebx, 1
    mov ecx, temp
    mov edx, 1
    int 80h
    dec dword[counter]
    jmp printing

end_print:
popa
ret






//trial
section.data
zero: db '0'
lz : equ $-zero
space : db ' '
ls : equ $-space
m1: db 'Enter a number:'
l1: equ $-m1

section.bss
    read : resd 1
    temp : resd 1
    print : resd 1
    counter : resd 1
    n : resd 1

section.text
glabal_start:
_start:

mov eax, 4
mov ebx, 1
mov ecx, m1
mov edx, l1
int 80h

call read_num
mov eax, dword[read]
mov dword[n], eax

mov eax, dword[n]
mov dword[print], eax
call print_num

read_num:
pusha
mov dword[read], 0

    reading:
    mov eax, 3
    mov ebx, 0
    mov ecx, temp
    mov edx, 1
    int 80h

    cmp dword[temp], 10
    je end_read

    sub dword[temp], 30h
    mov eax, dword[read]
    mov ebx, 10
    mov edx, 0
    mul ebx

    add eax, dword[temp]
    mov dword[read], eax
    jmp reading

end_read:
popa
ret


print_num:
mov dword[counter], 0
cmp dword[print], 0
jne extracting

mov eax, 4
mov ebx, 1
mov ecx, zero
mov edx, lz
int 80h

    extracting:
        cmp dword[print], 0
        je printint

        mov eax, dword[print]
        mov edx, 0
        mov ebx, 10
        div ebx
        push edx
        mov dword[print], eax
        inc dword[counter]
        jmp extracting

    printing:
        cmp[counter], 0
        je end_print

        pop edx
        mov dword[temp], edx
        add dword[temp], 30h
        mov eax, 4
        mov ebx, 1
        mov ecx, temp
        mov edx, 1
        int 80h

        dec dword[temp]
        jmp printing 

    end_print:
        popa
        ret


